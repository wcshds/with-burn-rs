#[test]
fn test_behavior_align_with_pytorch() {
    TestBackend::seed(0);
    let config = LstmConfig::new(2, 4, true).with_bidirectional(true);
    let mut lstm = config.init::<TestBackend>();

    fn create_gate_controller<const D1: usize, const D2: usize>(
        input_weights: [[f32; D1]; D2],
        input_biases: [f32; D1],
        hidden_weights: [[f32; D1]; D1],
        hidden_biases: [f32; D1],
    ) -> GateController<TestBackend> {
        let d_input = input_weights[0].len();
        let d_output = input_weights.len();

        let input_record = LinearRecord {
            weight: Param::from(Tensor::from_data(Data::from(input_weights))),
            bias: Some(Param::from(Tensor::from_data(Data::from(input_biases)))),
        };
        let hidden_record = LinearRecord {
            weight: Param::from(Tensor::from_data(Data::from(hidden_weights))),
            bias: Some(Param::from(Tensor::from_data(Data::from(hidden_biases)))),
        };
        GateController::create_with_weights(
            d_input,
            d_output,
            true,
            Initializer::XavierUniform { gain: 1.0 },
            input_record,
            hidden_record,
        )
    }
        let input = Tensor::<TestBackend, 3>::from_data(Data::from([[[-0.703, -0.783], [-2.065, -0.121], [-1.320, -0.539]]]));

        lstm.input_gate = create_gate_controller(
            [[0.393, 0.296, 0.368, -0.137], [-0.396, 0.229, -0.140, 0.100]],
            [0.119, 0.108, 0.446, 0.377],
            [[-0.342, 0.320, -0.278, 0.429], [0.420, 0.299, -0.221, -0.188], [0.199, 0.087, 0.238, -0.225], [-0.270, -0.048, 0.069, -0.184]],
            [0.116, -0.445, -0.434, -0.210],
        );

        lstm.forget_gate = create_gate_controller(
            [[-0.010, -0.176, -0.208, 0.243], [-0.145, -0.482, -0.239, -0.027]],
            [0.207, 0.322, -0.101, 0.065],
            [[0.162, -0.324, 0.034, -0.233], [0.029, 0.041, 0.122, -0.111], [-0.132, 0.083, -0.111, -0.254], [0.172, 0.469, -0.027, 0.439]],
            [-0.080, -0.343, -0.211, 0.119],
        );

        lstm.cell_gate = create_gate_controller(
            [[0.012, -0.355, -0.288, -0.425], [0.283, -0.385, -0.291, -0.025]],
            [0.238, -0.420, 0.421, 0.096],
            [[0.429, 0.106, -0.224, -0.466], [0.040, -0.196, -0.256, 0.147], [-0.101, -0.341, 0.082, 0.111], [0.326, 0.111, -0.218, 0.097]],
            [-0.474, -0.485, -0.358, 0.490],
        );

        lstm.output_gate = create_gate_controller(
            [[-0.382, -0.255, 0.006, 0.013], [-0.372, -0.441, -0.109, -0.355]],
            [-0.151, -0.071, 0.409, 0.203],
            [[0.044, -0.174, 0.498, 0.163], [0.030, -0.328, 0.092, 0.472], [-0.391, 0.196, -0.132, 0.475], [-0.083, -0.291, -0.480, -0.425]],
            [0.063, -0.400, 0.196, -0.349],
        );

        lstm.input_gate_bw = Some(create_gate_controller(
            [[0.357, 0.379, 0.225, 0.098], [0.467, 0.264, 0.386, 0.030]],
            [-0.029, 0.382, 0.186, 0.374],
            [[-0.009, 0.177, 0.394, -0.119], [0.272, -0.403, 0.350, -0.250], [0.134, -0.419, -0.187, 0.075], [0.480, 0.217, -0.008, -0.494]],
            [-0.171, 0.348, 0.480, -0.367],
        ));

        lstm.forget_gate_bw = Some(create_gate_controller(
            [[0.039, 0.022, 0.487, -0.189], [-0.382, 0.001, -0.385, -0.398]],
            [0.199, -0.383, -0.085, 0.208],
            [[-0.267, -0.459, -0.453, 0.001], [-0.388, -0.206, 0.097, -0.079], [0.157, 0.441, 0.483, -0.449], [0.113, -0.002, 0.280, 0.494]],
            [-0.045, -0.132, 0.314, -0.039],
        ));

        lstm.cell_gate_bw = Some(create_gate_controller(
            [[-0.396, -0.476, -0.048, 0.285], [0.376, 0.044, -0.286, -0.000]],
            [-0.438, 0.025, 0.208, -0.191],
            [[-0.125, 0.116, 0.289, -0.136], [-0.035, 0.157, -0.002, -0.029], [-0.072, 0.099, -0.370, 0.395], [-0.252, -0.283, -0.026, -0.374]],
            [-0.387, -0.086, 0.307, 0.001],
        ));

        lstm.output_gate_bw = Some(create_gate_controller(
            [[-0.032, 0.192, -0.491, -0.338], [-0.340, 0.374, 0.046, -0.102]],
            [0.202, 0.054, -0.259, 0.129],
            [[-0.203, -0.267, -0.046, 0.482], [-0.066, 0.028, -0.268, -0.306], [-0.456, -0.052, -0.348, 0.367], [-0.252, -0.010, -0.042, 0.409]],
            [0.156, -0.282, 0.204, -0.493],
        ));

        let expected_result = Data::from([[[-0.14882, -0.05673, 0.13943, 0.19814, -0.15483, 0.11190, 0.26294, -0.15640], [-0.15843, -0.05854, 0.18866, 0.27346, -0.04695, 0.13869, 0.25713, -0.22329], [-0.19338, -0.07739, 0.22874, 0.32586, -0.08456, 0.08492, 0.20756, -0.12508]]]);

        let (_, hidden_state) = lstm.forward(input, None);

        hidden_state.to_data().assert_approx_eq(&expected_result, 3)
}