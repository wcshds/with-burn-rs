#[test]
fn test_behavior_align_with_pytorch() {
    TestBackend::seed(0);
    let config = LstmConfig::new(2, 4, true).with_bidirectional(true);
    let mut lstm = config.init::<TestBackend>();

    fn create_gate_controller<const D1: usize, const D2: usize>(
        input_weights: [[f32; D1]; D2],
        input_biases: [f32; D1],
        hidden_weights: [[f32; D1]; D1],
        hidden_biases: [f32; D1],
    ) -> GateController<TestBackend> {
        let d_input = input_weights[0].len();
        let d_output = input_weights.len();

        let input_record = LinearRecord {
            weight: Param::from(Tensor::from_data(Data::from(input_weights))),
            bias: Some(Param::from(Tensor::from_data(Data::from(input_biases)))),
        };
        let hidden_record = LinearRecord {
            weight: Param::from(Tensor::from_data(Data::from(hidden_weights))),
            bias: Some(Param::from(Tensor::from_data(Data::from(hidden_biases)))),
        };
        GateController::create_with_weights(
            d_input,
            d_output,
            true,
            Initializer::XavierUniform { gain: 1.0 },
            input_record,
            hidden_record,
        )
    }
        let input = Tensor::<TestBackend, 3>::from_data(Data::from([[[0.574, -1.223], [1.688, 1.241], [-0.540, -0.130]]]));

        lstm.input_gate = create_gate_controller(
            [[0.395, 0.349, -0.209, -0.331], [0.335, -0.023, 0.252, 0.105]],
            [0.180, 0.384, -0.261, -0.161],
            [[0.010, -0.421, 0.376, -0.317], [-0.048, 0.186, -0.203, -0.070], [-0.024, 0.230, -0.378, 0.315], [-0.281, -0.168, -0.041, -0.459]],
            [0.327, 0.143, 0.488, -0.391],
        );

        lstm.forget_gate = create_gate_controller(
            [[0.157, 0.357, -0.448, -0.053], [0.277, 0.490, -0.184, -0.206]],
            [0.207, 0.316, -0.121, -0.188],
            [[-0.485, 0.489, -0.440, -0.211], [0.361, 0.369, -0.144, -0.027], [-0.402, 0.135, -0.465, -0.035], [-0.033, 0.261, 0.152, -0.069]],
            [0.423, -0.264, 0.059, -0.065],
        );

        lstm.cell_gate = create_gate_controller(
            [[-0.286, -0.127, -0.405, -0.082], [0.354, 0.294, -0.108, 0.303]],
            [0.047, 0.016, 0.356, 0.209],
            [[-0.201, 0.056, 0.222, -0.316], [0.146, 0.224, 0.483, -0.021], [-0.005, -0.394, -0.085, -0.352], [0.160, 0.050, -0.136, -0.138]],
            [-0.058, -0.008, -0.206, -0.448],
        );

        lstm.output_gate = create_gate_controller(
            [[-0.415, -0.254, -0.413, -0.423], [0.375, -0.313, 0.233, -0.456]],
            [0.036, -0.336, -0.495, 0.328],
            [[0.214, 0.148, -0.370, 0.479], [0.134, 0.405, -0.182, -0.296], [0.038, -0.306, 0.251, -0.083], [0.290, 0.164, -0.427, 0.356]],
            [-0.235, -0.067, 0.194, -0.465],
        );

        lstm.input_gate_bw = Some(create_gate_controller(
            [[-0.075, -0.434, -0.464, 0.377], [-0.223, 0.482, -0.354, 0.349]],
            [-0.271, 0.172, -0.085, -0.357],
            [[0.015, 0.093, -0.288, 0.426], [0.419, 0.157, -0.174, 0.238], [0.031, -0.404, 0.163, 0.437], [0.114, 0.330, -0.484, 0.118]],
            [-0.391, 0.024, 0.109, -0.214],
        ));

        lstm.forget_gate_bw = Some(create_gate_controller(
            [[0.279, 0.241, -0.161, 0.339], [-0.226, 0.455, 0.189, 0.142]],
            [0.340, 0.063, 0.129, 0.100],
            [[-0.170, -0.412, 0.398, -0.160], [-0.090, 0.174, 0.167, -0.354], [-0.327, 0.258, 0.141, -0.354], [-0.230, 0.337, -0.033, -0.354]],
            [0.485, -0.266, -0.321, 0.012],
        ));

        lstm.cell_gate_bw = Some(create_gate_controller(
            [[-0.015, -0.066, 0.046, -0.456], [-0.353, -0.495, 0.191, -0.347]],
            [-0.231, -0.126, -0.432, 0.006],
            [[-0.188, -0.048, 0.101, -0.459], [0.258, -0.231, 0.479, 0.353], [-0.421, 0.265, 0.458, 0.155], [-0.309, -0.456, 0.365, 0.106]],
            [0.249, -0.268, -0.418, -0.376],
        ));

        lstm.output_gate_bw = Some(create_gate_controller(
            [[-0.476, 0.217, 0.139, 0.142], [0.180, 0.232, -0.308, 0.040]],
            [-0.412, -0.291, -0.285, -0.117],
            [[-0.020, -0.344, 0.187, -0.146], [-0.282, -0.397, 0.238, 0.180], [0.334, -0.151, -0.360, 0.199], [0.076, -0.320, 0.495, 0.000]],
            [0.216, -0.466, 0.338, 0.005],
        ));

        let expected_result = Data::from([[[-0.08841, -0.12201, 0.00680, -0.09169, 0.03941, -0.02359, -0.32667, -0.18728], [-0.11092, -0.02514, -0.11345, -0.00945, -0.02139, -0.24333, -0.14792, -0.27498], [-0.06291, -0.00401, 0.00233, -0.04539, 0.01303, -0.04821, -0.19811, -0.01084]]]);

        let (_, hidden_state) = lstm.forward(input, None);

        hidden_state.to_data().assert_approx_eq(&expected_result, 3)
}