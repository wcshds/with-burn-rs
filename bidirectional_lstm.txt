#[test]
fn test_bidirectional() {
    TestBackend::seed(0);
    let config = BiLstmConfig::new(2, 4, true);
    let mut lstm = config.init::<TestBackend>();

    fn create_gate_controller<const D1: usize, const D2: usize>(
        input_weights: [[f32; D1]; D2],
        input_biases: [f32; D1],
        hidden_weights: [[f32; D1]; D1],
        hidden_biases: [f32; D1],
    ) -> GateController<TestBackend> {
        let d_input = input_weights[0].len();
        let d_output = input_weights.len();

        let input_record = LinearRecord {
            weight: Param::from(Tensor::from_data(Data::from(input_weights))),
            bias: Some(Param::from(Tensor::from_data(Data::from(input_biases)))),
        };
        let hidden_record = LinearRecord {
            weight: Param::from(Tensor::from_data(Data::from(hidden_weights))),
            bias: Some(Param::from(Tensor::from_data(Data::from(hidden_biases)))),
        };
        GateController::create_with_weights(
            d_input,
            d_output,
            true,
            Initializer::XavierUniform { gain: 1.0 },
            input_record,
            hidden_record,
        )
    }
        let input = Tensor::<TestBackend, 3>::from_data(Data::from([[[-0.123, 0.682], [0.941, -0.431], [1.623, -0.493]]]));

        lstm.input_gate = create_gate_controller(
            [[-0.173, 0.252, 0.306, -0.468], [0.368, 0.358, 0.289, -0.491]],
            [-0.164, -0.378, -0.410, -0.410],
            [[0.147, -0.136, -0.491, -0.439], [-0.207, -0.285, -0.352, -0.462], [0.280, -0.309, 0.496, 0.250], [-0.223, -0.059, -0.198, 0.201]],
            [-0.405, 0.472, 0.353, 0.483],
        );

        lstm.forget_gate = create_gate_controller(
            [[-0.418, 0.092, 0.293, -0.417], [-0.488, 0.025, -0.108, -0.197]],
            [-0.330, -0.204, 0.150, -0.156],
            [[0.012, 0.236, 0.450, 0.269], [0.476, 0.106, 0.265, 0.175], [0.085, 0.227, -0.435, 0.360], [-0.356, 0.201, -0.280, -0.279]],
            [-0.214, -0.227, 0.223, 0.396],
        );

        lstm.cell_gate = create_gate_controller(
            [[-0.470, 0.340, -0.083, -0.415], [0.485, 0.040, 0.026, -0.482]],
            [0.095, 0.379, 0.399, -0.108],
            [[0.159, 0.400, 0.373, 0.423], [-0.117, 0.103, 0.453, 0.434], [-0.132, 0.427, 0.010, 0.040], [-0.014, -0.165, 0.454, -0.330]],
            [-0.249, -0.047, -0.063, -0.071],
        );

        lstm.output_gate = create_gate_controller(
            [[-0.421, -0.446, -0.478, 0.392], [-0.496, -0.265, -0.470, -0.187]],
            [0.089, -0.064, 0.028, -0.446],
            [[-0.430, 0.336, 0.116, -0.005], [0.054, 0.235, 0.366, -0.385], [-0.413, -0.436, -0.010, 0.169], [-0.359, 0.497, -0.342, 0.339]],
            [0.449, -0.429, -0.371, -0.312],
        );

        lstm.input_gate_reverse = create_gate_controller(
            [[0.305, 0.380, -0.340, 0.187], [-0.414, -0.046, -0.003, 0.018]],
            [-0.213, 0.193, -0.220, -0.321],
            [[0.055, -0.254, 0.053, -0.242], [-0.259, 0.265, 0.378, -0.487], [-0.099, -0.264, 0.209, 0.383], [-0.416, -0.170, -0.274, -0.364]],
            [-0.176, 0.454, 0.292, 0.041],
        );

        lstm.forget_gate_reverse = create_gate_controller(
            [[0.085, -0.271, 0.135, -0.435], [0.003, -0.147, 0.120, -0.095]],
            [0.006, 0.035, -0.146, 0.144],
            [[-0.028, -0.020, -0.026, -0.373], [-0.011, -0.261, 0.052, 0.190], [0.262, -0.045, -0.295, -0.277], [0.468, 0.246, -0.299, -0.391]],
            [-0.308, 0.386, -0.162, 0.441],
        );

        lstm.cell_gate_reverse = create_gate_controller(
            [[-0.200, -0.182, -0.036, 0.451], [0.452, 0.476, 0.083, 0.421]],
            [-0.099, 0.354, 0.257, 0.430],
            [[0.068, 0.460, 0.386, 0.253], [-0.094, 0.054, 0.092, 0.071], [-0.077, -0.439, 0.264, -0.323], [-0.238, 0.268, -0.069, -0.306]],
            [-0.132, -0.125, -0.044, 0.398],
        );

        lstm.output_gate_reverse = create_gate_controller(
            [[0.048, 0.238, 0.283, -0.136], [0.278, -0.269, 0.118, 0.449]],
            [-0.173, -0.198, -0.440, 0.329],
            [[0.109, -0.476, -0.405, 0.414], [-0.193, -0.134, 0.207, 0.320], [0.060, -0.428, -0.169, -0.043], [0.148, -0.033, 0.199, -0.198]],
            [-0.043, -0.206, 0.077, 0.201],
        );

        let expected_result = Data::from([[[0.05508, 0.06132, 0.06402, -0.05350, -0.10154, 0.05657, 0.04647, 0.39286], [-0.09529, 0.11519, 0.09426, -0.09133, -0.19169, -0.12777, 0.02145, 0.27391], [-0.14028, 0.12223, 0.08357, -0.13779, -0.15507, -0.11900, 0.02205, 0.21613]]]);

        let (_, hidden_state) = lstm.forward(input, None);

        hidden_state.to_data().assert_approx_eq(&expected_result, 3)
}